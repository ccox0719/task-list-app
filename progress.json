document.addEventListener("DOMContentLoaded", () => {
    const dateDisplay = document.getElementById("date-display");
    const taskList = document.getElementById("task-list");
    const progressBar = document.getElementById("progress-bar");
    const streakCounter = document.getElementById("streak-counter");

    const daysOfWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    let tasks = [];
    let streak = 0;
    let currentDate = new Date();

    const loadTasksFromJSON = async () => {
        try {
            const response = await fetch("tasks.json");
            if (!response.ok) throw new Error("Failed to load tasks");
            const data = await response.json();
            tasks = data;
            loadTasksForDate(currentDate);
        } catch (error) {
            console.error("Error loading tasks:", error);
        }
    };

    const loadProgress = async () => {
        try {
            const response = await fetch("progress.json");
            if (!response.ok) throw new Error("Failed to load progress");
            const data = await response.json();
            streak = data.streak;
        } catch (error) {
            console.error("Error loading progress:", error);
        }
    };

    const saveProgress = async (completedDays) => {
        const today = currentDate.toISOString().split("T")[0]; // Format: YYYY-MM-DD
        const progressData = {
            streak,
            completedDays,
        };
    
        try {
            // Save progress to progress.json
            const fs = require("fs");
            fs.writeFileSync("progress.json", JSON.stringify(progressData, null, 2), "utf8");
    
            console.log("Progress saved:", progressData); // Log for debugging
            alert(`Progress updated! Streak: ${streak}, Completed Days: ${completedDays.join(", ")}`);
        } catch (error) {
            console.error("Error saving progress:", error);
            alert("Error updating progress. Please try again.");
        }
    };
    

    const updateProgress = () => {
        const totalTasks = taskList.children.length;
        const completedTasks = document.querySelectorAll(".completed").length;

        if (completedTasks === totalTasks && totalTasks > 0) {
            streak++;
            streakCounter.textContent = streak;

            const today = currentDate.toISOString().split("T")[0]; // Format: YYYY-MM-DD
            saveProgress([today]);
        }
    };

    const toggleTask = (checkbox, listItem) => {
        if (checkbox.checked) {
            listItem.classList.add("completed");
        } else {
            listItem.classList.remove("completed");
        }
        updateProgress();
    };
    const pushProgressToGitHub = () => {
        const { exec } = require("child_process");
    
        exec("git add progress.json", (err, stdout, stderr) => {
            if (err) {
                console.error("Error adding progress.json:", stderr);
                return;
            }
            console.log("Staged progress.json:", stdout);
    
            exec(`git commit -m "Update progress.json with streak and completed days"`, (err, stdout, stderr) => {
                if (err) {
                    console.error("Error committing progress.json:", stderr);
                    return;
                }
                console.log("Committed progress.json:", stdout);
    
                exec("git push origin main", (err, stdout, stderr) => {
                    if (err) {
                        console.error("Error pushing progress.json:", stderr);
                        return;
                    }
                    console.log("Pushed progress.json to GitHub:", stdout);
                });
            });
        });
    };
    
    const loadTasksForDate = (date) => {
        dateDisplay.textContent = date.toDateString();
        const currentDay = daysOfWeek[date.getDay()];
        const todayTasks = tasks.tasks.daily || [];
        taskList.innerHTML = "";
        todayTasks.forEach((task, index) => {
            const listItem = document.createElement("li");
            const checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            checkbox.addEventListener("change", () => toggleTask(checkbox, listItem));
            listItem.textContent = task;
            listItem.prepend(checkbox);
            taskList.appendChild(listItem);
        });
    };

    loadProgress();
    loadTasksFromJSON();
});
